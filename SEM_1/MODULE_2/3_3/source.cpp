/*3_3 Даны неотрицательные целые числа n, k и массив целых чисел из диапазона[0..109] размера n.
Требуется найти k - ю порядковую статистику.т.е.напечатать число,
которое бы стояло на позиции с индексом k IN [0..n - 1] в отсортированном массиве.
Напишите нерекурсивный алгоритм.
Требования к дополнительной памяти : O(n).
Требуемое среднее время работы : O(n).
Функцию Partition следует реализовывать методом прохода двумя итераторами в одном направлении.
Описание для случая прохода от начала массива к концу :
Выбирается опорный элемент.
Опорный элемент меняется с последним элементом массива.
Во время работы Partition в начале массива содержатся элементы, не бОльшие опорного.Затем располагаются элементы, 
строго бОльшие опорного.В конце массива лежат нерассмотренные элементы.Последним элементом лежит опорный.
Итератор(индекс) i указывает на начало группы элементов, строго бОльших опорного.
Итератор j больше i, итератор j указывает на первый нерассмотренный элемент.
Шаг алгоритма.Рассматривается элемент, на который указывает j.Если он больше опорного, то сдвигаем j.
Если он не больше опорного, то меняем a[i] и a[j] местами, сдвигаем i и сдвигаем j.
В конце работы алгоритма меняем опорный и элемент, на который указывает итератор i.


INPUT:
10 4
1 2 3 4 5 6 7 8 9 10

OUTPUT:
5

*/

#include <iostream>
#include <random>
#include <fstream>

void swp(int &l, int &r)
{
	int temp = l;
	l = r;
	r = temp;
}

int KStat(int *arr, int N, int k)
{
	int *left = &arr[0], *right = &arr[N-1];
	int *beg = &arr[0];
	while (right - left > 0)
	{
		int *chosenInd = left + rand() % (right - left);
		int chosenVal = *chosenInd;
		swp(*chosenInd, *right);
		int *it1 = left, *it2 = left;
		for (; it2 < right; it2++)
		{
			if (*it2 <= chosenVal)
			{
				swp(*it2, *it1);
				++it1;
			}
		}
		swp(*it1, *right);

		if (it1 - beg > k)
		{
			right = beg + (it1 - beg) - 1;
		}
		else
			if (it1 - beg < k)
				left = beg + (it1 - beg) + 1;
			else
				left = right = beg + k;
	}
	return *left;
}

int main()
{
	int N;
	std::cin >> N;
	int k;
	std::cin >> k;
	int *arr = new int[N];
	for (int i = 0; i < N; i++)
	{
		std::cin >> arr[i];
	}

	int answer = KStat(arr, N, k);
	std::cout << answer << std::endl;

	delete[] arr;
	system("pause");
}